using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace CuttingRoom
{
	/// <summary>
	/// The group narrative object contains candidates from which the group selects based on the selection and termination criteria specified.
	/// </summary>
	[RequireComponent(typeof(GroupSelectionDecisionPoint))]
	public class GroupNarrativeObject : NarrativeObject
	{
		/// <summary>
		/// Contains the settings required when selecting the outputs generated by this object.
		/// </summary>
		public GroupSelectionDecisionPoint groupSelectionDecisionPoint = null;

		/// <summary>
		/// The processing loop for the group narrative object.
		/// </summary>
		/// <param name="sequencer"></param>
		/// <param name="sequencerLayer"></param>
		/// <returns></returns>
		public override IEnumerator Process(Sequencer sequencer, Sequencer.SequencerLayer sequencerLayer)
		{
			this.sequencer = sequencer;
			this.sequencerLayer = sequencerLayer;

			sequencer.RegisterNarrativeObjectSequenced(this);

			// Callback for processing starting.
			InvokeOnProcessStart();

			// Do group selection.
			yield return groupSelectionDecisionPoint.Process(OnCandidateSelected, sequencer, sequencerLayer, this);

			// Process the base functionality, output selection.
			yield return base.Process(sequencer, sequencerLayer);

			// Callback for processing finishing.
			InvokeOnProcessFinish();
		}

		public IEnumerator OnCandidateSelected(object selected)
		{
			if (selected != null)
			{
				if (selected is NarrativeObject)
				{
					NarrativeObject selectedNarrativeObject = selected as NarrativeObject;

					yield return selectedNarrativeObject.Process(sequencer, sequencerLayer);
				}
			}
		}
	}
}
